/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import { useRef, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import {useFrame, useThree} from '@react-three/fiber'
import {a} from '@react-spring/three'//to enable animations
import islandScene from '../assets/3d/island.glb'

const Island = ({isRotating, setIsRotating, setCurrentStage, ...props}) => {
  const islandRef = useRef(); 

  const {gl, viewport} = useThree();//hook three;js rendered and viewport

  const { nodes, materials } = useGLTF(islandScene)

  const lastX = useRef(0);//last horizontal position
  const rotationSpeed = useRef(0);//speed of rotation
  const dampingFactor = 0.95;//damping factor --> how fast is rotates

  //click hold and then rotate Hence we need to make 3 functions
  const handlePointerDown = (e) => {
    e.stopPropagation(); //so that the mouse only does what it is told in this function
    e.preventDefault();
    setIsRotating(true);

    //what type of click it is
    const clientX = e.touches ? e.touches[0].clientX : e.clientX;//if it is a touch event then get the first touch else get the clientX
    lastX.current = clientX;//set the lastX to the clientX
  };

  //when it is released
  const handlePointerUp = (e) => {
    e.stopPropagation(); //so that the mouse only does what it is told in this function
    e.preventDefault();
    setIsRotating(false);
  };

  const handlePointerMove = (e) => {
    e.stopPropagation(); //so that the mouse only does what it is told in this function
    e.preventDefault();

    if(isRotating)
      {         
        const clientX = e.touches ? e.touches[0].clientX : e.clientX;//if it is a touch event then get the first touch else get the clientX    
        const delta = (clientX - lastX.current)/viewport.width//difference between the lastX and the clientX
        islandRef.current.rotation.y += delta*0.01*Math.PI;//rotate the island
        lastX.current = clientX;
        rotationSpeed.current = delta*0.01*Math.PI;
      }
  }

  const handleKeyDown = (e) => {
    if(e.key == 'ArrowLeft'){
      if(!isRotating) setIsRotating(true);
      islandRef.current.rotation.y += 0.01*Math.PI;
      rotationSpeed.current = 0.0125
    }
    else if(e.key == 'ArrowRight'){
      if(!isRotating) setIsRotating(true);
      islandRef.current.rotation.y -= 0.01*Math.PI;
      rotationSpeed.current = -0.0125
    }
  }

  const handleKeyUp = (e) => {
    if(e.key == 'ArrowLeft' || e.key == 'ArrowRight'){
      setIsRotating(false);
    }
  }

  useFrame(() => {//for smoother rotation
    if(!isRotating){
      rotationSpeed.current *= dampingFactor;
      if(Math.abs(rotationSpeed.current) < 0.0001){
        rotationSpeed.current = 0;
      }
      islandRef.current.rotation.y += rotationSpeed.current;
    }
    else{
      const rotation = islandRef.current.rotation.y;
      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the island's orientation
      //keep the rotation within range
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
      //stages are the different views of the island and for pop ups to appear

    }
  })


  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointermove', handlePointerMove);
    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('keyup', handleKeyUp);

    return () => {
      canvas.removeEventListener('pointerdown', handlePointerDown);
      canvas.removeEventListener('pointerup', handlePointerUp);
      canvas.removeEventListener('pointermove', handlePointerMove);
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('keyup', handleKeyUp);
    }
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove])//define when the effect should be called or whta should change

  return (
    <a.group ref = {islandRef} {...props} dispose={null}>
      <mesh
        geometry={nodes.polySurface944_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface945_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface946_tree2_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface947_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface948_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface949_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.pCube11_rocks1_0.geometry}
        material={materials.PaletteMaterial001}
      />
    </a.group>
  )
}

export default Island;
